### SIRHA API - Casos de Prueba de Validación de Ruteo
### Pruebas para FEAT-022 US-0083: Validación Ruteo

@baseUrl = http://localhost:3000
@contentType = application/json

### ===========================================
### 1. VALIDACIÓN BÁSICA DE PROGRAMAS
### ===========================================

### 1.1 Programa válido (no requiere fallback)
POST {{baseUrl}}/routing-validation-examples/validate-program
Content-Type: {{contentType}}

{
  "programId": "PROG-CS",
  "requestId": "test-request-001",
  "context": {
    "userId": "user123",
    "source": "validation-test"
  }
}

### 1.2 Programa inválido (requiere fallback)
POST {{baseUrl}}/routing-validation-examples/validate-program
Content-Type: {{contentType}}

{
  "programId": "PROG-INVALID",
  "requestId": "test-request-002",
  "context": {
    "userId": "user456",
    "source": "validation-test"
  }
}

### 1.3 Programa inactivo (requiere fallback)
POST {{baseUrl}}/routing-validation-examples/validate-program
Content-Type: {{contentType}}

{
  "programId": "PROG-INACTIVE",
  "requestId": "test-request-003",
  "context": {
    "userId": "user789",
    "source": "validation-test"
  }
}

### 1.4 Programa inexistente (requiere fallback)
POST {{baseUrl}}/routing-validation-examples/validate-program
Content-Type: {{contentType}}

{
  "programId": "PROG-NONEXISTENT",
  "requestId": "test-request-004",
  "context": {
    "userId": "user101",
    "source": "validation-test"
  }
}

### ===========================================
### 2. VALIDACIÓN DE TODOS LOS PROGRAMAS VÁLIDOS
### ===========================================

### 2.1 Validar PROG-ING
POST {{baseUrl}}/routing-validation-examples/validate-program
Content-Type: {{contentType}}

{
  "programId": "PROG-ING",
  "requestId": "test-request-005"
}

### 2.2 Validar PROG-MAT
POST {{baseUrl}}/routing-validation-examples/validate-program
Content-Type: {{contentType}}

{
  "programId": "PROG-MAT",
  "requestId": "test-request-006"
}

### 2.3 Validar PROG-FIS
POST {{baseUrl}}/routing-validation-examples/validate-program
Content-Type: {{contentType}}

{
  "programId": "PROG-FIS",
  "requestId": "test-request-007"
}

### 2.4 Validar PROG-ADMIN (programa por defecto)
POST {{baseUrl}}/routing-validation-examples/validate-program
Content-Type: {{contentType}}

{
  "programId": "PROG-ADMIN",
  "requestId": "test-request-008"
}

### ===========================================
### 3. INTEGRACIÓN CON SOLICITUDES COMPLETAS
### ===========================================

### 3.1 Crear solicitud normal (programa válido esperado)
POST {{baseUrl}}/routing-validation-examples/create-with-validation
Content-Type: {{contentType}}

{
  "sourceSubjectId": "60d5ecb8b0a7c4b4b8b9b1a0",
  "sourceGroupId": "60d5ecb8b0a7c4b4b8b9b1a1",
  "targetSubjectId": "60d5ecb8b0a7c4b4b8b9b1a2",
  "targetGroupId": "60d5ecb8b0a7c4b4b8b9b1a3",
  "reason": "Solicitud con validación normal - mismo programa"
}

### 3.2 Crear solicitud que active fallback
POST {{baseUrl}}/routing-validation-examples/create-with-validation
Content-Type: {{contentType}}

{
  "sourceSubjectId": "60d5ecb8b0a7c4b4b8b9b1ax",
  "sourceGroupId": "60d5ecb8b0a7c4b4b8b9b1ay",
  "targetSubjectId": "60d5ecb8b0a7c4b4b8b9b1az",
  "targetGroupId": "60d5ecb8b0a7c4b4b8b9b1aw",
  "reason": "Solicitud que activará fallback - materias sin programa"
}

### 3.3 Crear solicitud con diferentes programas
POST {{baseUrl}}/routing-validation-examples/create-with-validation
Content-Type: {{contentType}}

{
  "sourceSubjectId": "60d5ecb8b0a7c4b4b8b9b1a1",
  "sourceGroupId": "60d5ecb8b0a7c4b4b8b9b1a2",
  "targetSubjectId": "60d5ecb8b0a7c4b4b8b9b1a4",
  "targetGroupId": "60d5ecb8b0a7c4b4b8b9b1a5",
  "reason": "Solicitud con diferentes programas - debe usar programa destino"
}

### ===========================================
### 4. CONSULTAS DE INFORMACIÓN
### ===========================================

### 4.1 Obtener estadísticas de validación
GET {{baseUrl}}/routing-validation-examples/validation-stats

### 4.2 Obtener casos que requieren fallback
GET {{baseUrl}}/routing-validation-examples/fallback-cases

### ===========================================
### 5. CASOS EDGE Y ROBUSTEZ
### ===========================================

### 5.1 Programa con caracteres especiales
POST {{baseUrl}}/routing-validation-examples/validate-program
Content-Type: {{contentType}}

{
  "programId": "PROG-SPECIAL@#$",
  "requestId": "test-request-009",
  "context": {
    "testCase": "special-characters"
  }
}

### 5.2 Programa vacío
POST {{baseUrl}}/routing-validation-examples/validate-program
Content-Type: {{contentType}}

{
  "programId": "",
  "requestId": "test-request-010",
  "context": {
    "testCase": "empty-program"
  }
}

### 5.3 Programa null (simulado con string)
POST {{baseUrl}}/routing-validation-examples/validate-program
Content-Type: {{contentType}}

{
  "programId": "null",
  "requestId": "test-request-011",
  "context": {
    "testCase": "null-program"
  }
}

### ===========================================
### 6. PRUEBAS DE CONSISTENCIA
### ===========================================

### 6.1 Validar mismo programa múltiples veces
POST {{baseUrl}}/routing-validation-examples/validate-program
Content-Type: {{contentType}}

{
  "programId": "PROG-CS",
  "requestId": "consistency-test-001"
}

### 6.2 Repetir validación exacta
POST {{baseUrl}}/routing-validation-examples/validate-program
Content-Type: {{contentType}}

{
  "programId": "PROG-CS",
  "requestId": "consistency-test-002"
}

### 6.3 Validar programa inválido múltiples veces
POST {{baseUrl}}/routing-validation-examples/validate-program
Content-Type: {{contentType}}

{
  "programId": "PROG-INVALID",
  "requestId": "consistency-test-003"
}

### ===========================================
### 7. VERIFICACIÓN DE AUDITORÍA
### ===========================================

### 7.1 Crear solicitud y verificar eventos de auditoría
POST {{baseUrl}}/routing-validation-examples/create-with-validation
Content-Type: {{contentType}}

{
  "sourceSubjectId": "60d5ecb8b0a7c4b4b8b9b1a5",
  "sourceGroupId": "60d5ecb8b0a7c4b4b8b9b1a6",
  "targetSubjectId": "60d5ecb8b0a7c4b4b8b9b1a7",
  "targetGroupId": "60d5ecb8b0a7c4b4b8b9b1a8",
  "reason": "Solicitud para verificar auditoría completa"
}

### 7.2 Obtener historial de auditoría (usar ID de respuesta anterior)
GET {{baseUrl}}/audit-examples/history/REPLACE_WITH_ACTUAL_REQUEST_ID

### ===========================================
### NOTAS DE PRUEBA:
### 
### Criterios de aceptación verificados:
### ✅ Toda solicitud tiene programa válido
### ✅ Fallback funciona correctamente
### ✅ Casos especiales se registran
### 
### Validaciones implementadas:
### 1. Verificar que programa existe en sistema
### 2. Verificar que programa está activo
### 3. Aplicar fallback si programa inválido
### 4. Usar programa de emergencia si fallback falla
### 5. Registrar evento FALLBACK en auditoría
### 6. Notificar administradores cuando sea necesario
### 
### Programas de prueba:
### - Válidos: PROG-CS, PROG-ING, PROG-MAT, PROG-FIS, PROG-ADMIN
### - Inválidos: PROG-INVALID, PROG-NONEXISTENT
### - Inactivos: PROG-INACTIVE, PROG-SUSPENDED
### - Por defecto: PROG-ADMIN
### - Emergencia: PROG-EMERGENCY
### 
### Flujo de validación:
### 1. Ruteo determina programa inicial
### 2. Validador verifica programa
### 3. Si inválido, aplica fallback
### 4. Registra evento FALLBACK si es necesario
### 5. Garantiza programa válido final
### 6. Audita toda la decisión
### 
### Casos que activan fallback:
### - Programa no existe
### - Programa inactivo/suspendido
### - Programa por defecto inválido
### - Cualquier error en validación
### ===========================================